!function(t){function e(s){for(var p,c,i=s[0],m=s[1],d=s[2],f=0,k=[];f<i.length;f++)c=i[f],Object.prototype.hasOwnProperty.call(r,c)&&r[c]&&k.push(r[c][0]),r[c]=0;for(p in m)Object.prototype.hasOwnProperty.call(m,p)&&(t[p]=m[p]);for(u&&u(s);k.length;)k.shift()();return l.push.apply(l,d||[]),a()}function a(){for(var t,s=0;s<l.length;s++){for(var p=l[s],c=!0,i=1;i<p.length;i++){var u=p[i];0!==r[u]&&(c=!1)}c&&(l.splice(s--,1),t=o(o.s=p[0]))}return t}var s={},r={main:0},l=[];function o(r){if(s[r])return s[r].exports;var l=s[r]={i:r,l:!1,exports:{}};return t[r].call(l.exports,l,l.exports,o),l.l=!0,l.exports}o.e=function(t){var s=[],l=r[t];if(0!==l)if(l)s.push(l[2]);else{var p=new Promise((function(s,p){l=r[t]=[s,p]}));s.push(l[2]=p);var c,i=document.createElement("script");i.charset="utf-8",i.timeout=120,o.nc&&i.setAttribute("nonce",o.nc),i.src=function(t){return o.p+"build/"+({compiler:"compiler"}[t]||t)+"."+{compiler:"156059fe"}[t]+".js"}(t);var u=new Error;c=function(s){i.onerror=i.onload=null,clearTimeout(m);var l=r[t];if(0!==l){if(l){var p=s&&("load"===s.type?"missing":s.type),c=s&&s.target&&s.target.src;u.message="Loading chunk "+t+" failed.\n("+p+": "+c+")",u.name="ChunkLoadError",u.type=p,u.request=c,l[1](u)}r[t]=void 0}};var m=setTimeout((function(){c({type:"timeout",target:i})}),12e4);i.onerror=i.onload=c,document.head.appendChild(i)}return Promise.all(s)},o.m=t,o.c=s,o.d=function(t,s,r){o.o(t,s)||Object.defineProperty(t,s,{enumerable:!0,get:r})},o.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},o.t=function(t,s){if(1&s&&(t=o(t)),8&s)return t;if(4&s&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(o.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&s&&"string"!=typeof t)for(var l in t)o.d(r,l,function(s){return t[s]}.bind(null,l));return r},o.n=function(t){var s=t&&t.__esModule?function(){return t.default}:function(){return t};return o.d(s,"a",s),s},o.o=function(t,s){return Object.prototype.hasOwnProperty.call(t,s)},o.p="",o.oe=function(t){throw t};var p=window.webpackJsonp=window.webpackJsonp||[],c=p.push.bind(p);p.push=e,p=p.slice();for(var i=0;i<p.length;i++)e(p[i]);var u=c;l.push([0,"chunk-vendors"]),a()}({0:function(t,s,r){r("f9dc"),t.exports=r("0c47")},"02f1":function(t,s,r){"use strict";r.r(s);var l={name:"DynView",mixins:[r("c7ea").default],components:{},data:()=>({}),computed:{},created(){},updated(){},watch:{},methods:{}},p=r("2877"),c=Object(p.a)(l,(function(){var t=this,s=t.$createElement;return(t._self._c||s)("div",[t._v(" "+t._s(t.itemValue)+" ")])}),[],!1,null,null,null);s.default=c.exports},"0861":function(t,s,r){"use strict";r.r(s);var l={name:"DynInput",mixins:[r("c7ea").default]},p=r("2877"),c=Object(p.a)(l,(function(){var t=this,s=t.$createElement;return(t._self._c||s)("el-input",t._g(t._b({model:{value:t.itemValue,callback:function(s){t.itemValue=s},expression:"itemValue"}},"el-input",t.cusProps,!1),t.cusEvents))}),[],!1,null,null,null);s.default=c.exports},1484:function(t,s,r){t.exports={description:"扩展自定义表单项所需的Mixin",tags:{examples:[{title:"example",content:"../../docs/DynFormItemMixin.md"}]},exportName:"default",displayName:"DynSelect",props:[{name:"formData",mixin:{name:"DynFormItemMixin",path:"DynFormItemMixin.js"},description:"表单数据",type:{name:"object"},defaultValue:{func:!1,value:"{}"}},{name:"item",mixin:{name:"DynFormItemMixin",path:"DynFormItemMixin.js"},description:"表单项配置信息",type:{name:"object"},defaultValue:{func:!1,value:"{}"}}],events:void 0,methods:void 0,slots:void 0,example:[r("584e")],examples:[{type:"noexample"}]}},"584e":function(t,s,r){r("6f28").bind(null,{}),r("ee44").bind(null,"",null,null),t.exports=[{type:"markdown",content:'## 源代码\n\n`DynFormItemMixin.js`\n\n```shell\n/**\r\n * 扩展自定义表单项所需的Mixin\r\n */\r\n<span class="token builtin class-name">export</span> default <span class="token punctuation">{</span>\r\n  props: <span class="token punctuation">{</span>\r\n    /**\r\n     * 表单项配置信息\r\n     */\r\n    item: <span class="token punctuation">{</span>\r\n      type: Object,\r\n      default: <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\r\n        <span class="token builtin class-name">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\r\n      <span class="token punctuation">}</span>\r\n    <span class="token punctuation">}</span>,\r\n    /**\r\n     * 表单数据\r\n     */\r\n    formData: <span class="token punctuation">{</span>\r\n      type: Object,\r\n      default: <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>\r\n        <span class="token builtin class-name">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\r\n      <span class="token punctuation">}</span>\r\n    <span class="token punctuation">}</span>\r\n  <span class="token punctuation">}</span>,\r\n  computed: <span class="token punctuation">{</span>\r\n    /**\r\n     * 表获取表单项的自定prop配置\r\n     * @return <span class="token punctuation">{</span>any<span class="token punctuation">}</span>\r\n     */\r\n    <span class="token function-name function">cusProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n      <span class="token builtin class-name">return</span> this.item.cusProps\r\n    <span class="token punctuation">}</span>,\r\n    /**\r\n     * 获取表单项的自定义event配置\r\n     * @return <span class="token punctuation">{</span>any<span class="token punctuation">}</span>\r\n     */\r\n    <span class="token function-name function">cusEvents</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n      <span class="token builtin class-name">return</span> this.item.cusEvents\r\n    <span class="token punctuation">}</span>,\r\n    /**\r\n     * 获取表单项的值\r\n     */\r\n    itemValue: <span class="token punctuation">{</span>\r\n      set<span class="token punctuation">(</span>newValue<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n        this.formData<span class="token punctuation">[</span>this.item.prop<span class="token punctuation">]</span> <span class="token operator">=</span> newValue\r\n      <span class="token punctuation">}</span>,\r\n      <span class="token function-name function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n        <span class="token builtin class-name">return</span> this.formData<span class="token punctuation">[</span>this.item.prop<span class="token punctuation">]</span>\r\n      <span class="token punctuation">}</span>\r\n    <span class="token punctuation">}</span>,\r\n    /**\r\n     * 获取表单项所需的其他数据\r\n     * @return <span class="token punctuation">{</span>any<span class="token punctuation">}</span>\r\n     */\r\n    <span class="token function-name function">cusData</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n      <span class="token builtin class-name">return</span> this.item.cusData\r\n    <span class="token punctuation">}</span>\r\n  <span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span>\n```'}]},"6db8":function(t,s,r){"use strict";r.r(s);var l={name:"DynSelect",mixins:[r("c7ea").default],components:{},data:()=>({}),computed:{},created(){},updated(){},watch:{},methods:{}},p=r("2877"),c=Object(p.a)(l,(function(){var t=this,s=t.$createElement,r=t._self._c||s;return r("el-select",t._g(t._b({model:{value:t.itemValue,callback:function(s){t.itemValue=s},expression:"itemValue"}},"el-select",t.cusProps,!1),t.cusEvents),t._l(t.cusData,(function(t){return r("el-option",{key:t.value,attrs:{label:t.label,value:t.value}})})),1)}),[],!1,null,null,null);s.default=c.exports},"6e8c":function(t,s,r){t.exports={description:"扩展自定义表单项所需的Mixin",tags:{examples:[{title:"example",content:"../../docs/DynFormItemMixin.md"}]},exportName:"default",displayName:"DynInput",props:[{name:"formData",mixin:{name:"DynFormItemMixin",path:"DynFormItemMixin.js"},description:"表单数据",type:{name:"object"},defaultValue:{func:!1,value:"{}"}},{name:"item",mixin:{name:"DynFormItemMixin",path:"DynFormItemMixin.js"},description:"表单项配置信息",type:{name:"object"},defaultValue:{func:!1,value:"{}"}}],events:void 0,methods:void 0,slots:void 0,example:[r("584e")],examples:[{type:"noexample"}]}},"8db9":function(t,s,r){r("6f28").bind(null,{}),r("ee44").bind(null,"",null,null),t.exports=[{type:"markdown",content:"`vue2-element-dyn-form` 基于`vue 2.x`以及`element ui 2.x`的动态表单扩展. 这个应该从名字上就可以看出来\n\n## 安装\n\n`npm install vue2-element-dyn-form`\n\n## 技术栈\n\n*   vue 2.x\n*   element ui 2.x\n\n## 解决的问题与特点\n\n*   支持表单项的动态创建\n*   表单的编辑与只读模式\n*   支持手动设置表单项的错误提示信息\n*   支持表单项的动态显示和隐藏\n*   可扩展自己的表单项"}]},"9e76":function(t,s,r){t.exports={displayName:"DynForm",description:"基于 Element UI 2.x 的动态表单组件",tags:{requires:[{description:"./DynInput.vue",title:"requires"},{description:"./DynSelect.vue",title:"requires"},{description:"./DynView.vue",title:"requires"}],examples:[{title:"example",content:"../../docs/DynForm.md"}]},exportName:"default",props:[{name:"elFormConfig",description:"表单配置.支持element ui表单的所有配置",type:{name:"object"},defaultValue:{func:!1,value:"{}"}},{name:"formItemArrConfig",description:"表单项配置\n     <pre>\n     [\n     {\n          prop:string, // 必填.该值将用于el-form-item的props和key\n          compName:string, // 必填.组件名称\n          label:string, // 可选.该值将用于el-form-item的label\n          rules:array,  // 可选.验证规则\n          show:boolean|function, // 默认为true, 表示当前表单项是否显示\n          cusData:any, // 可选.存放组件需要的额外数据, 如: select的下拉选项值\n          cusProps:object, // 可选.用于配置自定义组件额外的prop(如果直接使用的element-ui组件,那么请将element-ui组件支持的prop写在该对象)\n          cusEvents:object, // 可选.用于配置自定义组件额外的event事件监听(如果直接使用的element-ui组件,那么请将element-ui组件支持的event写在该对象)\n      }\n     ]\n     </pre>",type:{name:"array"},defaultValue:{func:!1,value:"[]"}},{name:"value",description:"表单数据",type:{name:"object"},defaultValue:{func:!1,value:"{}"}}],events:void 0,methods:[{name:"validate",description:"执行表单验证\n\n调用示例: const ret = await $refs.dynForm.validate()",tags:{example:[{description:!0,title:"example"}],access:[{description:"public",title:"access"}],return:[{description:"Promise 表单验证结果",title:"return"}]}},{name:"clearValidate",description:"清除表单错误信息",params:[{name:"props",type:{name:"string | Array| undefind"},description:"表单项的prop值. 不传则清空所有表单项的错误信息"}],tags:{access:[{description:"public",title:"access"}],params:[{title:"param",type:{name:"string | Array| undefind"},name:"props",description:"表单项的prop值. 不传则清空所有表单项的错误信息"}]}},{name:"getData",description:"获取表单数据(该数据是deep clone之后的结果, 修改该数据, 不会影响表单数据)\n\n调用示例: const formData = await $refs.dynForm.getData()",tags:{example:[{description:!0,title:"example"}],access:[{description:"public",title:"access"}],return:[{description:"obj deep clone之后的表单数据",title:"return"}]}},{name:"setFieldErrorMsg",description:"手动给表单项设置自定义错误提示信息",params:[{name:"prop",type:{name:"string"},description:"表单字段(与表单配置的prop对应)"},{name:"errorMsg",type:{name:"string"},description:"错误提示信息"}],tags:{access:[{description:"public",title:"access"}],params:[{title:"param",type:{name:"string"},name:"prop",description:"表单字段(与表单配置的prop对应)"},{title:"param",type:{name:"string"},name:"errorMsg",description:"错误提示信息"}]}},{name:"getElFormInstance",description:"获取element ui的表单实例\n\n调用示例: const instance = $refs.dynForm.getElFormInstance()",tags:{example:[{description:!0,title:"example"}],access:[{description:"public",title:"access"}],return:[{description:"{Vue | Element | (Vue | Element)[] | undefined}",title:"return"}]}}],slots:void 0,example:[r("f292")],examples:null}},b027:function(t,s,r){"use strict";r.r(s);var l=r("0861"),p=r("6db8"),c=r("02f1"),i={name:"DynForm",components:{DynInput:l.default,DynSelect:p.default,DynView:c.default},props:{value:{type:Object,default:()=>({})},elFormConfig:{type:Object,default:()=>({})},formItemArrConfig:{type:Array,default:()=>[]}},data:()=>({elFormRef:"jsonForm"}),created(){},updated(){},methods:{itemShow(t){return"function"==typeof t.show?t.show(t,this.value):"boolean"!=typeof t.show||t.show},validate(){const t=this.getElFormInstance(),s={valid:!1,errorFields:null};return new Promise(r=>{t.validate((t,l)=>{if(!t)return s.errorFields=l,r(s),!1;s.valid=t,r(s)})})},clearValidate(t){const s=this.getElFormInstance();t?s.clearValidate():s.clearValidate(t)},getData(){return function n(t){if(null==t)return null;if("object"!=typeof t)return t;if(t.constructor===Date)return new Date(t);const s=new t.constructor;for(const r in t)if(Object.prototype.hasOwnProperty.call(t,r)){const l=t[r];s[r]="object"==typeof l?n(l):l}return s}(this.value)},setFieldErrorMsg(t,s){const r=this.getElFormInstance().fields;if(r&&r.length>0){let l=null;for(let p=0;p<r.length;p++)if(l=r[p],l.prop===t){l.validateState="error",l.validateMessage=s;break}}},getElFormInstance(){return this.$refs[this.elFormRef]}}},u=r("2877"),m=Object(u.a)(i,(function(){var t=this,s=t.$createElement,r=t._self._c||s;return r("el-form",t._b({ref:t.elFormRef,attrs:{model:t.value}},"el-form",t.elFormConfig,!1),[t._l(t.formItemArrConfig,(function(s,l){return[t.itemShow(s)?r("el-form-item",{key:s.prop+"-"+l+"-"+s.compName,class:s.prop+"-"+s.compName,attrs:{label:s.label,prop:s.prop,rules:s.rules}},[r(s.compName,{tag:"component",attrs:{item:s,"form-data":t.value}})],1):t._e()]}))],2)}),[],!1,null,null,null);s.default=m.exports},bc18:function(t,s,r){t.exports={description:"扩展自定义表单项所需的Mixin",tags:{examples:[{title:"example",content:"../../docs/DynFormItemMixin.md"}]},exportName:"default",displayName:"DynView",props:[{name:"formData",mixin:{name:"DynFormItemMixin",path:"DynFormItemMixin.js"},description:"表单数据",type:{name:"object"},defaultValue:{func:!1,value:"{}"}},{name:"item",mixin:{name:"DynFormItemMixin",path:"DynFormItemMixin.js"},description:"表单项配置信息",type:{name:"object"},defaultValue:{func:!1,value:"{}"}}],events:void 0,methods:void 0,slots:void 0,example:[r("584e")],examples:[{type:"noexample"}]}},c7ea:function(t,s,r){"use strict";r.r(s),s.default={props:{item:{type:Object,default:()=>({})},formData:{type:Object,default:()=>({})}},computed:{cusProps(){return this.item.cusProps},cusEvents(){return this.item.cusEvents},itemValue:{set(t){this.formData[this.item.prop]=t},get(){return this.formData[this.item.prop]}},cusData(){return this.item.cusData}}}},f292:function(t,s,r){var l=r("6f28").bind(null,{}),p=r("ee44").bind(null,"",null,null);t.exports=[{type:"markdown",content:'## 扩展表单项示例\n\n```html\n<span class="token comment">&lt;!--\r\nDynInput 组件\r\n@creator pan\r\n@date 2021-07-10\r\n--\x3e</span>\r\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\r\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-input</span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>itemValue<span class="token punctuation">"</span></span> <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cusProps<span class="token punctuation">"</span></span> <span class="token attr-name">v-on</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cusEvents<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-input</span><span class="token punctuation">></span></span>\r\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\r\n\r\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\r\n<span class="token keyword">import</span> DynFormItemMixin <span class="token keyword">from</span> <span class="token string">\'./DynFormItemMixin\'</span>\r\n\r\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\r\n  name<span class="token operator">:</span> <span class="token string">\'DynInput\'</span><span class="token punctuation">,</span>\r\n  mixins<span class="token operator">:</span> <span class="token punctuation">[</span>DynFormItemMixin<span class="token punctuation">]</span>\r\n<span class="token punctuation">}</span>\r\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n```\n\n```html\n<span class="token comment">&lt;!--\r\nDynSelect 组件\r\n@creator pan\r\n@date 2021-07-10\r\n--\x3e</span>\r\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">></span></span>\r\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-select</span> <span class="token attr-name">v-bind</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cusProps<span class="token punctuation">"</span></span> <span class="token attr-name">v-on</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>cusEvents<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>itemValue<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>\r\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>el-option</span>\r\n      <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item in cusData<span class="token punctuation">"</span></span>\r\n      <span class="token attr-name">:key</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.value<span class="token punctuation">"</span></span>\r\n      <span class="token attr-name">:label</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.label<span class="token punctuation">"</span></span>\r\n      <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>item.value<span class="token punctuation">"</span></span>\r\n    <span class="token punctuation">></span></span>\r\n    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-option</span><span class="token punctuation">></span></span>\r\n  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>el-select</span><span class="token punctuation">></span></span>\r\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">></span></span>\r\n\r\n<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript">\r\n<span class="token keyword">import</span> DynFormItemMixin <span class="token keyword">from</span> <span class="token string">\'./DynFormItemMixin\'</span>\r\n\r\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>\r\n  name<span class="token operator">:</span> <span class="token string">\'DynSelect\'</span><span class="token punctuation">,</span>\r\n  mixins<span class="token operator">:</span> <span class="token punctuation">[</span>DynFormItemMixin<span class="token punctuation">]</span><span class="token punctuation">,</span>\r\n  components<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\r\n  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\r\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\r\n  computed<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\r\n  <span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'DynSelect created\'</span><span class="token punctuation">)</span>\r\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\r\n  <span class="token function">updated</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">\'DynSelect updated\'</span><span class="token punctuation">)</span>\r\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\r\n  watch<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>\r\n  methods<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\r\n<span class="token punctuation">}</span>\r\n</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>\n```\n\n## 使用示例\n\n### 简单使用'},{type:"code",content:"<template>\r\n  <div>\r\n    <el-button @click=\"handleSetFormValue\">设置表单值</el-button>\r\n    <el-button @click=\"handleSetErrorMessage\">手动设置错误信息</el-button>\r\n    <el-button @click=\"handleFormValidate\">表单验证</el-button>\r\n    <el-button @click=\"handleClearErrorMessage\">清除表单错误信息</el-button>\r\n    <p>\r\n      {{ formData }}\r\n    </p>\r\n    <p>\r\n      {{ validateResult }}\r\n    </p>\r\n    <dyn-form\r\n      :value=\"formData\"\r\n      :form-item-arr-config=\"formItemConfig\"\r\n      :ref=\"dynFormRef\"\r\n    ></dyn-form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'BasicDemo',\r\n  components: {},\r\n  data() {\r\n    return {\r\n      formData: {\r\n        name: '黑子',\r\n        addr: '',\r\n        hobby: 1,\r\n        country: 3\r\n      },\r\n      dynFormRef: 'dynFormRef',\r\n      /**\r\n       * 可选爱好列表\r\n       */\r\n      hobbyList: [],\r\n      /**\r\n       * 可选国籍\r\n       */\r\n      countryList: [],\r\n      validateResult: null\r\n    }\r\n  },\r\n  computed: {\r\n    formItemConfig() {\r\n      return [\r\n        {\r\n          prop: 'name',\r\n          compName: 'DynInput',\r\n          label: '姓名'\r\n        },\r\n        {\r\n          prop: 'addr',\r\n          compName: 'DynInput',\r\n          label: '住址',\r\n          rules: [{ required: true, message: '住址必填!' }]\r\n        },\r\n        {\r\n          prop: 'hobby',\r\n          compName: 'dyn-select',\r\n          label: '爱好',\r\n          cusProps: {\r\n            clearable: true\r\n          },\r\n          cusData: this.hobbyList\r\n        },\r\n        {\r\n          prop: 'country',\r\n          compName: 'dyn-select',\r\n          label: '国家',\r\n          cusProps: {\r\n            clearable: true\r\n          },\r\n          cusData: this.countryList\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  methods: {\r\n    handleSetErrorMessage() {\r\n      this.$refs[this.dynFormRef].setFieldErrorMsg(\r\n        'name',\r\n        '这是手动设置的错误信息!'\r\n      )\r\n    },\r\n    handleSetFormValue() {\r\n      this.formData.name = '张三'\r\n      this.formData.addr = '故宫'\r\n    },\r\n    handleClearErrorMessage() {\r\n      this.$refs[this.dynFormRef].clearValidate('name')\r\n    },\r\n    async handleFormValidate() {\r\n      this.validateResult = await this.$refs[this.dynFormRef].validate()\r\n    }\r\n  },\r\n  created() {\r\n    setTimeout(() => {\r\n      // 模拟网络请求\r\n      this.hobbyList = [\r\n        {\r\n          label: '篮球',\r\n          value: 1\r\n        },\r\n        {\r\n          label: '足球',\r\n          value: 2\r\n        },\r\n        {\r\n          label: '乒乓球',\r\n          value: 3\r\n        }\r\n      ]\r\n    }, 2000)\r\n    setTimeout(() => {\r\n      // 模拟网络请求\r\n      this.countryList = [\r\n        {\r\n          label: '中国',\r\n          value: 1\r\n        },\r\n        {\r\n          label: '韩国',\r\n          value: 2\r\n        },\r\n        {\r\n          label: '日本',\r\n          value: 3\r\n        }\r\n      ]\r\n    }, 4000)\r\n  }\r\n}\r\n<\/script>\r\n",settings:{importpath:"../examples/views"},evalInContext:p.bind(null,l.bind(null,"../examples/views")),compiled:{script:"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n;return {template: \"\\n  <div>\\n    <el-button @click=\\\"handleSetFormValue\\\">设置表单值</el-button>\\n    <el-button @click=\\\"handleSetErrorMessage\\\">手动设置错误信息</el-button>\\n    <el-button @click=\\\"handleFormValidate\\\">表单验证</el-button>\\n    <el-button @click=\\\"handleClearErrorMessage\\\">清除表单错误信息</el-button>\\n    <p>\\n      {{ formData }}\\n    </p>\\n    <p>\\n      {{ validateResult }}\\n    </p>\\n    <dyn-form\\n      :value=\\\"formData\\\"\\n      :form-item-arr-config=\\\"formItemConfig\\\"\\n      :ref=\\\"dynFormRef\\\"\\n    ></dyn-form>\\n  </div>\\n\", \r\n  name: 'BasicDemo',\r\n  components: {},\r\n  data: function data() {\r\n    return {\r\n      formData: {\r\n        name: '黑子',\r\n        addr: '',\r\n        hobby: 1,\r\n        country: 3\r\n      },\r\n      dynFormRef: 'dynFormRef',\r\n      \r\n      hobbyList: [],\r\n      \r\n      countryList: [],\r\n      validateResult: null\r\n    }\r\n  },\r\n  computed: {\r\n    formItemConfig: function formItemConfig() {\r\n      return [\r\n        {\r\n          prop: 'name',\r\n          compName: 'DynInput',\r\n          label: '姓名'\r\n        },\r\n        {\r\n          prop: 'addr',\r\n          compName: 'DynInput',\r\n          label: '住址',\r\n          rules: [{ required: true, message: '住址必填!' }]\r\n        },\r\n        {\r\n          prop: 'hobby',\r\n          compName: 'dyn-select',\r\n          label: '爱好',\r\n          cusProps: {\r\n            clearable: true\r\n          },\r\n          cusData: this.hobbyList\r\n        },\r\n        {\r\n          prop: 'country',\r\n          compName: 'dyn-select',\r\n          label: '国家',\r\n          cusProps: {\r\n            clearable: true\r\n          },\r\n          cusData: this.countryList\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  methods: {\r\n    handleSetErrorMessage: function handleSetErrorMessage() {\r\n      this.$refs[this.dynFormRef].setFieldErrorMsg(\r\n        'name',\r\n        '这是手动设置的错误信息!'\r\n      )\r\n    },\r\n    handleSetFormValue: function handleSetFormValue() {\r\n      this.formData.name = '张三'\r\n      this.formData.addr = '故宫'\r\n    },\r\n    handleClearErrorMessage: function handleClearErrorMessage() {\r\n      this.$refs[this.dynFormRef].clearValidate('name')\r\n    },\r\n    handleFormValidate: async function handleFormValidate() {\r\n      this.validateResult = await this.$refs[this.dynFormRef].validate()\r\n    }\r\n  },\r\n  created: function created() {\n    var this$1 = this;\n\r\n    setTimeout(function () {\r\n      \r\n      this$1.hobbyList = [\r\n        {\r\n          label: '篮球',\r\n          value: 1\r\n        },\r\n        {\r\n          label: '足球',\r\n          value: 2\r\n        },\r\n        {\r\n          label: '乒乓球',\r\n          value: 3\r\n        }\r\n      ]\r\n    }, 2000)\r\n    setTimeout(function () {\r\n      \r\n      this$1.countryList = [\r\n        {\r\n          label: '中国',\r\n          value: 1\r\n        },\r\n        {\r\n          label: '韩国',\r\n          value: 2\r\n        },\r\n        {\r\n          label: '日本',\r\n          value: 3\r\n        }\r\n      ]\r\n    }, 4000)\r\n  }\r\n};\r\n",style:void 0}},{type:"markdown",content:"### 查看模式与编辑模式"},{type:"code",content:"<template>\r\n  <div>\r\n    <el-button @click=\"watchModel = !watchModel\"\r\n      >{{ watchModel ? '切换到编辑模式' : '切换到查看模式' }}\r\n    </el-button>\r\n    <el-button @click=\"handleSetFormValue\">设置表单值</el-button>\r\n    <el-button @click=\"handleSetErrorMessage\">手动设置错误信息</el-button>\r\n    <el-button @click=\"handleClearErrorMessage\">清除表单错误信息</el-button>\r\n    <p>\r\n      {{ formData }}\r\n    </p>\r\n    <dyn-form\r\n      :value=\"formData\"\r\n      :form-item-arr-config=\"formItemConfig\"\r\n      :ref=\"dynFormRef\"\r\n    ></dyn-form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'WatchModelDemo',\r\n  components: {},\r\n  data() {\r\n    return {\r\n      formData: {\r\n        name: '黑子',\r\n        addr: '',\r\n        hobby: 1\r\n      },\r\n      dynFormRef: 'dynFormRef',\r\n      // 是否为查看模式\r\n      watchModel: false\r\n    }\r\n  },\r\n  computed: {\r\n    formItemConfig() {\r\n      return [\r\n        {\r\n          prop: 'name',\r\n          compName: this.watchModel ? 'DynView' : 'DynInput',\r\n          label: '姓名'\r\n        },\r\n        {\r\n          prop: 'addr',\r\n          compName: this.watchModel ? 'DynView' : 'DynInput',\r\n          label: '住址'\r\n        },\r\n        {\r\n          prop: 'hobby',\r\n          compName: this.watchModel ? 'DynView' : 'dyn-select',\r\n          label: '爱好',\r\n          cusData: [\r\n            {\r\n              label: '篮球',\r\n              value: 1\r\n            },\r\n            {\r\n              label: '足球',\r\n              value: 2\r\n            },\r\n            {\r\n              label: '乒乓球',\r\n              value: 3\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  methods: {\r\n    handleSetErrorMessage() {\r\n      this.$refs[this.dynFormRef].setFieldErrorMsg(\r\n        'name',\r\n        '这是手动设置的错误信息!'\r\n      )\r\n    },\r\n    handleSetFormValue() {\r\n      this.formData.name = '张三'\r\n      this.formData.addr = '故宫'\r\n    },\r\n    handleClearErrorMessage() {\r\n      this.$refs[this.dynFormRef].clearValidate('name')\r\n    }\r\n  }\r\n}\r\n<\/script>\r\n",settings:{importpath:"../examples/views"},evalInContext:p.bind(null,l.bind(null,"../examples/views")),compiled:{script:"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n;return {template: \"\\n  <div>\\n    <el-button @click=\\\"watchModel = !watchModel\\\"\\n      >{{ watchModel ? '切换到编辑模式' : '切换到查看模式' }}\\n    </el-button>\\n    <el-button @click=\\\"handleSetFormValue\\\">设置表单值</el-button>\\n    <el-button @click=\\\"handleSetErrorMessage\\\">手动设置错误信息</el-button>\\n    <el-button @click=\\\"handleClearErrorMessage\\\">清除表单错误信息</el-button>\\n    <p>\\n      {{ formData }}\\n    </p>\\n    <dyn-form\\n      :value=\\\"formData\\\"\\n      :form-item-arr-config=\\\"formItemConfig\\\"\\n      :ref=\\\"dynFormRef\\\"\\n    ></dyn-form>\\n  </div>\\n\", \r\n  name: 'WatchModelDemo',\r\n  components: {},\r\n  data: function data() {\r\n    return {\r\n      formData: {\r\n        name: '黑子',\r\n        addr: '',\r\n        hobby: 1\r\n      },\r\n      dynFormRef: 'dynFormRef',\r\n      \r\n      watchModel: false\r\n    }\r\n  },\r\n  computed: {\r\n    formItemConfig: function formItemConfig() {\r\n      return [\r\n        {\r\n          prop: 'name',\r\n          compName: this.watchModel ? 'DynView' : 'DynInput',\r\n          label: '姓名'\r\n        },\r\n        {\r\n          prop: 'addr',\r\n          compName: this.watchModel ? 'DynView' : 'DynInput',\r\n          label: '住址'\r\n        },\r\n        {\r\n          prop: 'hobby',\r\n          compName: this.watchModel ? 'DynView' : 'dyn-select',\r\n          label: '爱好',\r\n          cusData: [\r\n            {\r\n              label: '篮球',\r\n              value: 1\r\n            },\r\n            {\r\n              label: '足球',\r\n              value: 2\r\n            },\r\n            {\r\n              label: '乒乓球',\r\n              value: 3\r\n            }\r\n          ]\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  methods: {\r\n    handleSetErrorMessage: function handleSetErrorMessage() {\r\n      this.$refs[this.dynFormRef].setFieldErrorMsg(\r\n        'name',\r\n        '这是手动设置的错误信息!'\r\n      )\r\n    },\r\n    handleSetFormValue: function handleSetFormValue() {\r\n      this.formData.name = '张三'\r\n      this.formData.addr = '故宫'\r\n    },\r\n    handleClearErrorMessage: function handleClearErrorMessage() {\r\n      this.$refs[this.dynFormRef].clearValidate('name')\r\n    }\r\n  }\r\n};\r\n",style:void 0}},{type:"markdown",content:"### 级联操作"},{type:"code",content:"<template>\r\n  <div>\r\n    <el-button @click=\"watchModel = !watchModel\"\r\n      >{{ watchModel ? '切换到编辑模式' : '切换到查看模式' }}\r\n    </el-button>\r\n    <el-button @click=\"handleSetFormValue\">设置表单值</el-button>\r\n    <el-button @click=\"handleSetErrorMessage\">手动设置错误信息</el-button>\r\n    <el-button @click=\"handleClearErrorMessage\">清除表单错误信息</el-button>\r\n    <p>\r\n      {{ formData }}\r\n    </p>\r\n    <dyn-form\r\n      :value=\"formData\"\r\n      :form-item-arr-config=\"formItemConfig\"\r\n      :ref=\"dynFormRef\"\r\n    ></dyn-form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: 'CascadeOperateDemo',\r\n  components: {},\r\n  data() {\r\n    return {\r\n      formData: {\r\n        name: '黑子',\r\n        addr: '',\r\n        province: null,\r\n        city: null\r\n      },\r\n      dynFormRef: 'dynFormRef',\r\n      // 是否为查看模式\r\n      watchModel: false,\r\n      // 当前省份的城市列表\r\n      cityList: [],\r\n      provinceList: [\r\n        {\r\n          label: '湖南省',\r\n          value: 1,\r\n          cityList: [\r\n            { label: '长沙', value: 1 },\r\n            { label: '岳阳', value: 2 }\r\n          ]\r\n        },\r\n        {\r\n          label: '广东省',\r\n          value: 2,\r\n          cityList: [\r\n            { label: '广州', value: 3 },\r\n            { label: '深圳', value: 4 }\r\n          ]\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  computed: {\r\n    formItemConfig() {\r\n      return [\r\n        {\r\n          prop: 'name',\r\n          compName: this.watchModel ? 'DynView' : 'DynInput',\r\n          label: '姓名'\r\n        },\r\n        {\r\n          prop: 'addr',\r\n          compName: this.watchModel ? 'DynView' : 'DynInput',\r\n          label: '住址'\r\n        },\r\n        {\r\n          prop: 'province',\r\n          compName: this.watchModel ? 'DynView' : 'dyn-select',\r\n          label: '省份',\r\n          cusData: this.provinceList,\r\n          cusProps: {\r\n            clearable: true\r\n          },\r\n          cusEvents: {\r\n            change: (selectedValue) => {\r\n              console.log('selectedValue', selectedValue)\r\n              this.formData.city = null\r\n              const selectedProvince = this.provinceList.find(\r\n                (item) => item.value === selectedValue\r\n              )\r\n              if (selectedProvince) {\r\n                this.cityList = selectedProvince.cityList\r\n              }\r\n            }\r\n          }\r\n        },\r\n        {\r\n          prop: 'city',\r\n          compName: this.watchModel ? 'DynView' : 'dyn-select',\r\n          label: '城市',\r\n          show: () => this.formData.province,\r\n          cusData: this.cityList\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  methods: {\r\n    handleSetErrorMessage() {\r\n      this.$refs[this.dynFormRef].setFieldErrorMsg(\r\n        'name',\r\n        '这是手动设置的错误信息!'\r\n      )\r\n    },\r\n    handleSetFormValue() {\r\n      this.formData.name = '张三'\r\n      this.formData.addr = '故宫'\r\n    },\r\n    handleClearErrorMessage() {\r\n      this.$refs[this.dynFormRef].clearValidate('name')\r\n    }\r\n  }\r\n}\r\n<\/script>\r\n",settings:{importpath:"../examples/views"},evalInContext:p.bind(null,l.bind(null,"../examples/views")),compiled:{script:"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\n;return {template: \"\\n  <div>\\n    <el-button @click=\\\"watchModel = !watchModel\\\"\\n      >{{ watchModel ? '切换到编辑模式' : '切换到查看模式' }}\\n    </el-button>\\n    <el-button @click=\\\"handleSetFormValue\\\">设置表单值</el-button>\\n    <el-button @click=\\\"handleSetErrorMessage\\\">手动设置错误信息</el-button>\\n    <el-button @click=\\\"handleClearErrorMessage\\\">清除表单错误信息</el-button>\\n    <p>\\n      {{ formData }}\\n    </p>\\n    <dyn-form\\n      :value=\\\"formData\\\"\\n      :form-item-arr-config=\\\"formItemConfig\\\"\\n      :ref=\\\"dynFormRef\\\"\\n    ></dyn-form>\\n  </div>\\n\", \r\n  name: 'CascadeOperateDemo',\r\n  components: {},\r\n  data: function data() {\r\n    return {\r\n      formData: {\r\n        name: '黑子',\r\n        addr: '',\r\n        province: null,\r\n        city: null\r\n      },\r\n      dynFormRef: 'dynFormRef',\r\n      \r\n      watchModel: false,\r\n      \r\n      cityList: [],\r\n      provinceList: [\r\n        {\r\n          label: '湖南省',\r\n          value: 1,\r\n          cityList: [\r\n            { label: '长沙', value: 1 },\r\n            { label: '岳阳', value: 2 }\r\n          ]\r\n        },\r\n        {\r\n          label: '广东省',\r\n          value: 2,\r\n          cityList: [\r\n            { label: '广州', value: 3 },\r\n            { label: '深圳', value: 4 }\r\n          ]\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  computed: {\r\n    formItemConfig: function formItemConfig() {\n      var this$1 = this;\n\r\n      return [\r\n        {\r\n          prop: 'name',\r\n          compName: this.watchModel ? 'DynView' : 'DynInput',\r\n          label: '姓名'\r\n        },\r\n        {\r\n          prop: 'addr',\r\n          compName: this.watchModel ? 'DynView' : 'DynInput',\r\n          label: '住址'\r\n        },\r\n        {\r\n          prop: 'province',\r\n          compName: this.watchModel ? 'DynView' : 'dyn-select',\r\n          label: '省份',\r\n          cusData: this.provinceList,\r\n          cusProps: {\r\n            clearable: true\r\n          },\r\n          cusEvents: {\r\n            change: function (selectedValue) {\r\n              console.log('selectedValue', selectedValue)\r\n              this$1.formData.city = null\r\n              var selectedProvince = this$1.provinceList.find(\r\n                function (item) { return item.value === selectedValue; }\r\n              )\r\n              if (selectedProvince) {\r\n                this$1.cityList = selectedProvince.cityList\r\n              }\r\n            }\r\n          }\r\n        },\r\n        {\r\n          prop: 'city',\r\n          compName: this.watchModel ? 'DynView' : 'dyn-select',\r\n          label: '城市',\r\n          show: function () { return this$1.formData.province; },\r\n          cusData: this.cityList\r\n        }\r\n      ]\r\n    }\r\n  },\r\n  methods: {\r\n    handleSetErrorMessage: function handleSetErrorMessage() {\r\n      this.$refs[this.dynFormRef].setFieldErrorMsg(\r\n        'name',\r\n        '这是手动设置的错误信息!'\r\n      )\r\n    },\r\n    handleSetFormValue: function handleSetFormValue() {\r\n      this.formData.name = '张三'\r\n      this.formData.addr = '故宫'\r\n    },\r\n    handleClearErrorMessage: function handleClearErrorMessage() {\r\n      this.$refs[this.dynFormRef].clearValidate('name')\r\n    }\r\n  }\r\n};\r\n",style:void 0}}]},f9dc:function(t,s,r){"use strict";r.r(s);var l=r("a026"),p=r("5c96"),c=r.n(p);r("0fae"),l.default.use(c.a)},fc6d:function(t,s,r){t.exports={description:"扩展自定义表单项所需的Mixin",tags:{examples:[{title:"example",content:"../../docs/DynFormItemMixin.md"}]},exportName:"default",displayName:"DynFormItemMixin",props:[{name:"formData",description:"表单数据",type:{name:"object"},defaultValue:{func:!1,value:"{}"}},{name:"item",description:"表单项配置信息",type:{name:"object"},defaultValue:{func:!1,value:"{}"}}],events:void 0,methods:void 0,slots:void 0,example:[r("584e")],examples:null}}});